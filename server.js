// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
const express = require('express');
const { Sequelize, DataTypes } = require('sequelize');
const mysql2 = require('mysql2');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const TelegramBot = require('node-telegram-bot-api');
const multer = require('multer');
const path = require('path');
const cors = require('cors');
const helmet = require('helmet');
const { body, validationResult } = require('express-validator');
const winston = require('winston');
const fs = require('fs').promises;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
    new winston.transports.Console(),
  ],
});

// Middleware
app.use(helmet()); // –ó–∞—â–∏—Ç–∞ –æ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
app.use(cors({
  origin: '*', // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'Uploads'), {
  setHeaders: (res) => {
    res.set('Access-Control-Allow-Origin', '*');
  }
}));

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
const ensureDirectories = async () => {
  const dirs = [
    path.join(__dirname, 'Uploads/documents'),
    path.join(__dirname, 'Uploads/icons'),
    path.join(__dirname, 'Uploads/apks'),
  ];
  for (const dir of dirs) {
    try {
      await fs.mkdir(dir, { recursive: true });
      await fs.chmod(dir, 0o755);
      logger.info(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}: ${error.message}`);
    }
  }
};
ensureDirectories();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sequelize = new Sequelize({
  dialect: 'mysql',
  host: process.env.DB_HOST || 'vh438.timeweb.ru',
  username: process.env.DB_USER || 'ch79145_myprojec',
  password: process.env.DB_PASS || 'Vasya11091109',
  database: 'ch79145_myprojec',
  port: 3306,
  dialectModule: mysql2,
  logging: (msg) => logger.debug(msg),
});

// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const User = sequelize.define('User', {
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    validate: { isEmail: true },
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  accountType: {
    type: DataTypes.ENUM('individual', 'commercial'),
    allowNull: false,
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  phone: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  telegramId: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  addressStreet: { type: DataTypes.STRING },
  addressCity: { type: DataTypes.STRING },
  addressCountry: { type: DataTypes.STRING },
  addressPostalCode: { type: DataTypes.STRING },
  documents: {
    type: DataTypes.JSON,
    allowNull: false,
    defaultValue: [],
  },
  isVerified: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
  },
  verificationToken: { type: DataTypes.STRING },
  resetPasswordToken: { type: DataTypes.STRING },
  resetPasswordExpires: { type: DataTypes.DATE },
  jwtToken: {
    type: DataTypes.STRING,
    allowNull: true,
  },
}, {
  timestamps: true,
  tableName: 'Users',
});

// –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const PreRegister = sequelize.define('PreRegister', {
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    validate: { isEmail: true },
  },
  telegramId: {
    type: DataTypes.STRING,
    allowNull: true,
  },
}, {
  timestamps: true,
  tableName: 'PreRegisters',
});

// –ú–æ–¥–µ–ª—å –º–∞–ø–ø–∏–Ω–≥–∞ Telegram
const TelegramMapping = sequelize.define('TelegramMapping', {
  username: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  chatId: {
    type: DataTypes.STRING,
    allowNull: false,
  },
}, {
  timestamps: true,
  tableName: 'TelegramMappings',
});

// –ú–æ–¥–µ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const App = sequelize.define('App', {
  name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: false,
  },
  category: {
    type: DataTypes.ENUM('games', 'productivity', 'education', 'entertainment'),
    allowNull: false,
  },
  iconPath: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  apkPath: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: User,
      key: 'id',
    },
  },
  status: {
    type: DataTypes.ENUM('pending', 'approved', 'rejected'),
    defaultValue: 'pending',
  },
  downloads: {
    type: DataTypes.INTEGER,
    defaultValue: 0,
  },
}, {
  timestamps: true,
  tableName: 'Apps',
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    if (file.fieldname === 'documents') {
      cb(null, './Uploads/documents/');
    } else if (file.fieldname === 'icon') {
      cb(null, './Uploads/icons/');
    } else if (file.fieldname === 'apk') {
      cb(null, './Uploads/apks/');
    } else {
      cb(new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –ø–æ–ª—è'), null);
    }
  },
  filename: (req, file, cb) => {
    const sanitizedName = path.basename(file.originalname, path.extname(file.originalname)).replace(/[^a-zA-Z0-9]/g, '_');
    cb(null, `${Date.now()}-${sanitizedName}${path.extname(file.originalname)}`);
  },
});

const upload = multer({
  storage,
  limits: { fileSize: 100 * 1024 * 1024 }, // 100 –ú–ë –¥–ª—è APK
  fileFilter: (req, file, cb) => {
    if (file.fieldname === 'documents') {
      const filetypes = /pdf|jpg|jpeg|png/;
      const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
      const mimetype = filetypes.test(file.mimetype);
      if (extname && mimetype) {
        return cb(null, true);
      }
      cb(new Error('–î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ PDF, JPG, JPEG –∏ PNG!'));
    } else if (file.fieldname === 'icon') {
      const filetypes = /jpg|jpeg|png/;
      const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
      const mimetype = filetypes.test(file.mimetype);
      if (extname && mimetype) {
        return cb(null, true);
      }
      cb(new Error('–î–ª—è –∏–∫–æ–Ω–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ JPG, JPEG –∏ PNG!'));
    } else if (file.fieldname === 'apk') {
      if (file.originalname.toLowerCase().endsWith('.apk') && file.mimetype === 'application/vnd.android.package-archive') {
        return cb(null, true);
      }
      cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ APK —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME-—Ç–∏–ø–æ–º!'));
    } else {
      cb(new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –ø–æ–ª—è!'));
    }
  },
}).fields([
  { name: 'icon', maxCount: 1 },
  { name: 'apk', maxCount: 1 },
  { name: 'documents', maxCount: 3 },
]);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7597915834:AAFzMDAKOc5UgcuAXWYdXy4V0Hj4qXL0KeY';
let bot;
try {
  bot = new TelegramBot(TELEGRAM_BOT_TOKEN, {
    polling: {
      interval: 300,
      autoStart: true,
      params: { timeout: 10 },
    },
  });
  logger.info('Telegram-–±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
  logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞: ${error.message}`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot?.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || `user_${chatId}`;
  try {
    await TelegramMapping.upsert({
      username: `@${username.replace(/^@/, '')}`,
      chatId: chatId.toString(),
    });
    await bot.sendMessage(
      chatId,
      `üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlayEvit!\n–í–∞—à Telegram chat ID: ${chatId}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –∏–ª–∏ –∏–º—è (@${username}) –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –∑–¥–µ—Å—å!`
    );
    logger.info(`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω chat ID ${chatId} –¥–ª—è @${username}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è chat ID ${chatId}: ${error.message}`);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
});

// –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ Telegram ID
async function resolveTelegramId(telegramId) {
  if (!telegramId) {
    throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è Telegram ID');
  }
  if (/^\d+$/.test(telegramId)) {
    const mapping = await TelegramMapping.findOne({ where: { chatId: telegramId } });
    if (!mapping) {
      throw new Error(`Chat ID ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É.`);
    }
    return telegramId;
  }
  const username = telegramId.startsWith('@') ? telegramId : `@${telegramId}`;
  const mapping = await TelegramMapping.findOne({ where: { username } });
  if (!mapping) {
    throw new Error(`–ò–º—è ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É.`);
  }
  return mapping.chatId;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(telegramId, message) {
  if (!bot) {
    logger.warn('Telegram-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏');
    return;
  }
  try {
    const chatId = await resolveTelegramId(telegramId);
    await bot.sendMessage(chatId, message);
    logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ chat ID ${chatId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ Telegram ID ${telegramId}: ${error.message}`);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendVerificationTelegram(telegramId, email, token) {
  if (!bot) {
    logger.warn('Telegram-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return;
  }
  try {
    const chatId = await resolveTelegramId(telegramId);
    const verificationUrl = `https://vasyaproger-my-backend-9f42.twc1.net/api/auth/verify/${token}`;
    const message = `
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlayEvit, ${telegramId}! üåü
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email (${email}) –ø–æ —Å—Å—ã–ª–∫–µ:
${verificationUrl}
–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–µ –Ω–∞ —Å–∞–π—Ç–µ:
–¢–æ–∫–µ–Ω: ${token}
üîó –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 100 –ª–µ—Ç.
`;
    await bot.sendMessage(chatId, message);
    logger.info(`–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ chat ID ${chatId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ Telegram ID ${telegramId}: ${error.message}`);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
async function sendPasswordResetTelegram(telegramId, token) {
  if (!bot) {
    logger.warn('Telegram-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
    return;
  }
  try {
    const chatId = await resolveTelegramId(telegramId);
    const resetUrl = `https://vasyaproger-my-backend-9f42.twc1.net/reset-password/${token}`;
    const message = `
üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è PlayEvit üîê
–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
${resetUrl}
üîó –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å.
–ï—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ.
`;
    await bot.sendMessage(chatId, message);
    logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ chat ID ${chatId}`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ Telegram ID ${telegramId}: ${error.message}`);
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) {
    logger.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    return res.status(401).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
  }
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');
    req.user = decoded;
    next();
  } catch (error) {
    logger.error(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: ${error.message}`);
    return res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
sequelize.sync({ alter: true }).then(() => {
  logger.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}).catch((error) => {
  logger.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
});

// –ú–∞—Ä—à—Ä—É—Ç—ã

// –ü—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post(
  '/api/pre-register',
  [
    body('email').isEmail().normalizeEmail().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π email'),
    body('telegramId').optional().trim().custom((value) => {
      if (!value || /^\d+$/.test(value) || /^@/.test(value)) {
        return true;
      }
      throw new Error('Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∏–ª–∏ —Å @');
    }),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${JSON.stringify(errors.array())}`);
      return res.status(400).json({ message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', errors: errors.array() });
    }

    try {
      const { email, telegramId } = req.body;
      const existingPreRegister = await PreRegister.findOne({ where: { email } });
      if (existingPreRegister) {
        return res.status(400).json({ message: 'Email —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è' });
      }

      const preRegister = await PreRegister.create({ email, telegramId });
      let message = `üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ PlayEvit!\n–í–∞—à email (${email}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è.\n–£–≤–µ–¥–æ–º–∏–º –æ –∑–∞–ø—É—Å–∫–µ –≤ 2025!`;
      if (telegramId) {
        try {
          await sendTelegramMessage(telegramId, message);
        } catch (error) {
          message = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É.';
        }
      }

      logger.info(`–ü—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${email}`);
      res.status(201).json({ message });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
  }
);

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post(
  '/api/auth/register',
  upload,
  [
    body('email').isEmail().normalizeEmail().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π email'),
    body('password').isLength({ min: 8 }).withMessage('–ü–∞—Ä–æ–ª—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('accountType').isIn(['individual', 'commercial']).withMessage('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞'),
    body('name').notEmpty().trim().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è'),
    body('phone').notEmpty().trim().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω'),
    body('telegramId').notEmpty().trim().custom((value) => {
      if (/^\d+$/.test(value) || /^@/.test(value)) {
        return true;
      }
      throw new Error('Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∏–ª–∏ —Å @');
    }).withMessage('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π Telegram ID'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${JSON.stringify(errors.array())}`);
      return res.status(400).json({ message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', errors: errors.array() });
    }

    try {
      const {
        email, password, accountType, name, phone, telegramId,
        addressStreet, addressCity, addressCountry, addressPostalCode,
      } = req.body;

      if (!req.files || !req.files.documents || req.files.documents.length === 0) {
        logger.warn('–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        return res.status(400).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç' });
      }

      const existingUser = await User.findOne({ where: { email } });
      if (existingUser) {
        return res.status(400).json({ message: 'Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
      }

      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(password, salt);
      const verificationToken = jwt.sign(
        { email },
        process.env.JWT_SECRET || 'your_jwt_secret',
        { expiresIn: '100y' }
      );

      const authToken = jwt.sign(
        { email, accountType, name, telegramId },
        process.env.JWT_SECRET || 'your_jwt_secret',
        { expiresIn: '7d' }
      );

      const user = await User.create({
        email,
        password: hashedPassword,
        accountType,
        name,
        phone,
        telegramId,
        addressStreet,
        addressCity,
        addressCountry,
        addressPostalCode,
        documents: req.files.documents.map(file => file.path),
        verificationToken,
        jwtToken: authToken,
      });

      try {
        await sendVerificationTelegram(telegramId, email, verificationToken);
        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${email}`);
        res.status(201).json({
          message: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram (${telegramId}) –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.`,
          token: authToken,
          user: {
            id: user.id,
            email: user.email,
            accountType: user.accountType,
            name: user.name,
            telegramId: user.telegramId,
          },
        });
      } catch (telegramError) {
        logger.warn(`–°–æ–æ–±—â–µ–Ω–∏–µ Telegram –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${email}: ${telegramError.message}`);
        res.status(201).json({
          message: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ Telegram-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É —Å ${telegramId}.`,
          token: authToken,
          user: {
            id: user.id,
            email: user.email,
            accountType: user.accountType,
            name: user.name,
            telegramId: user.telegramId,
          },
        });
      }
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
  }
);

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email –ø–æ —Å—Å—ã–ª–∫–µ
app.get('/api/auth/verify/:token', async (req, res) => {
  try {
    const { token } = req.params;
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');
    } catch (error) {
      logger.warn(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error.message}`);
      return res.status(400).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
    }

    const user = await User.findOne({ where: { email: decoded.email } });
    if (!user) {
      logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${decoded.email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (user.verificationToken !== token) {
      logger.warn(`–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è ${decoded.email}`);
      return res.status(400).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }

    if (user.isVerified) {
      return res.status(200).json({ message: 'Email —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' });
    }

    user.isVerified = true;
    user.verificationToken = null;
    await user.save();

    try {
      await sendTelegramMessage(user.telegramId, `‚úÖ –í–∞—à email (${user.email}) –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlayEvit!`);
    } catch (telegramError) {
      logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è ${user.email}: ${telegramError.message}`);
    }

    logger.info(`Email –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${user.email}`);
    res.status(200).json({ message: 'Email —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!' });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error.message}`);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
app.post(
  '/api/auth/verify-form',
  [
    body('email').isEmail().normalizeEmail().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π email'),
    body('token').notEmpty().trim().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${JSON.stringify(errors.array())}`);
      return res.status(400).json({ message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', errors: errors.array() });
    }

    try {
      const { email, token } = req.body;
      let decoded;
      try {
        decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');
      } catch (error) {
        logger.warn(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–µ: ${error.message}`);
        return res.status(400).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
      }

      if (decoded.email !== email) {
        logger.warn(`Email ${email} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º`);
        return res.status(400).json({ message: '–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç email' });
      }

      const user = await User.findOne({ where: { email } });
      if (!user) {
        logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      if (user.verificationToken !== token) {
        logger.warn(`–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è ${email}`);
        return res.status(400).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      }

      if (user.isVerified) {
        return res.status(200).json({ message: 'Email —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' });
      }

      user.isVerified = true;
      user.verificationToken = null;
      await user.save();

      try {
        await sendTelegramMessage(user.telegramId, `‚úÖ –í–∞—à email (${user.email}) –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlayEvit!`);
      } catch (telegramError) {
        logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è ${user.email}: ${telegramError.message}`);
      }

      logger.info(`Email –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –¥–ª—è ${user.email}`);
      res.status(200).json({ message: 'Email —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!' });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: ${error.message}`);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
  }
);

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post(
  '/api/auth/login',
  [
    body('email').isEmail().normalizeEmail().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π email'),
    body('password').notEmpty().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${JSON.stringify(errors.array())}`);
      return res.status(400).json({ message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', errors: errors.array() });
    }

    try {
      const { email, password } = req.body;
      const user = await User.findOne({ where: { email } });
      if (!user) {
        logger.warn(`–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email: ${email}`);
        return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
      }

      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        logger.warn(`–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è ${email}`);
        return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
      }

      let token = user.jwtToken;
      if (!token) {
        token = jwt.sign(
          { id: user.id, email: user.email },
          process.env.JWT_SECRET || 'your_jwt_secret',
          { expiresIn: '7d' }
        );
        user.jwtToken = token;
        await user.save();
      }

      try {
        await sendTelegramMessage(user.telegramId, `üîê –í—ã –≤–æ—à–ª–∏ –≤ PlayEvit —Å email: ${user.email}`);
      } catch (telegramError) {
        logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –¥–ª—è ${user.email}: ${telegramError.message}`);
      }

      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª: ${user.email}`);
      res.status(200).json({
        token,
        user: {
          id: user.id,
          email: user.email,
          accountType: user.accountType,
          name: user.name,
          telegramId: user.telegramId,
          isVerified: user.isVerified,
        },
        message: '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω',
      });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
  }
);

// –ó–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
app.post(
  '/api/auth/forgot-password',
  [body('email').isEmail().normalizeEmail().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π email')],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${JSON.stringify(errors.array())}`);
      return res.status(400).json({ message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', errors: errors.array() });
    }

    try {
      const { email } = req.body;
      const user = await User.findOne({ where: { email } });
      if (!user) {
        logger.warn(`–ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ email: ${email}`);
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      const resetToken = jwt.sign(
        { email },
        process.env.JWT_SECRET || 'your_jwt_secret',
        { expiresIn: '1h' }
      );
      user.resetPasswordToken = resetToken;
      user.resetPasswordExpires = new Date(Date.now() + 3600000);
      await user.save();

      try {
        await sendPasswordResetTelegram(user.telegramId, resetToken);
        logger.info(`–ó–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è ${user.email}`);
        res.status(200).json({ message: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram' });
      } catch (telegramError) {
        logger.warn(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${user.email}: ${telegramError.message}`);
        res.status(200).json({
          message: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É.',
          email,
        });
      }
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${error.message}`);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
  }
);

// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
app.post(
  '/api/auth/reset-password/:token',
  [
    body('password').isLength({ min: 8 }).withMessage('–ü–∞—Ä–æ–ª—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('confirmPassword').custom((value, { req }) => value === req.body.password).withMessage('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${JSON.stringify(errors.array())}`);
      return res.status(400).json({ message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', errors: errors.array() });
    }

    try {
      const { token } = req.params;
      const { password } = req.body;
      let decoded;
      try {
        decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');
      } catch (error) {
        logger.warn(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞: ${error.message}`);
        return res.status(400).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
      }

      const user = await User.findOne({
        where: {
          email: decoded.email,
          resetPasswordToken: token,
          resetPasswordExpires: { [Sequelize.Op.gt]: new Date() },
        },
      });
      if (!user) {
        logger.warn(`–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –¥–ª—è ${decoded.email}`);
        return res.status(400).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
      }

      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(password, salt);
      user.resetPasswordToken = null;
      user.resetPasswordExpires = null;
      user.jwtToken = null;
      await user.save();

      try {
        await sendTelegramMessage(user.telegramId, `üîë –ü–∞—Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω –¥–ª—è email: ${user.email}`);
      } catch (telegramError) {
        logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –¥–ª—è ${user.email}: ${telegramError.message}`);
      }

      logger.info(`–ü–∞—Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω –¥–ª—è ${user.email}`);
      res.status(200).json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω' });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${error.message}`);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
  }
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
app.get('/api/user/profile', authenticateToken, async (req, res) => {
  try {
    const user = await User.findByPk(req.user.id, {
      attributes: { exclude: ['password', 'verificationToken', 'resetPasswordToken', 'resetPasswordExpires', 'jwtToken'] },
    });
    if (!user) {
      logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID: ${req.user.id}`);
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.status(200).json(user);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
app.post(
  '/api/user/documents',
  authenticateToken,
  upload,
  async (req, res) => {
    try {
      const user = await User.findByPk(req.user.id);
      if (!user) {
        logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID: ${req.user.id}`);
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      if (!req.files || !req.files.documents || req.files.documents.length === 0) {
        logger.warn('–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return res.status(400).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç' });
      }

      const newDocuments = req.files.documents.map(file => file.path);
      user.documents = [...user.documents, ...newDocuments].slice(0, 3);
      user.isVerified = true;
      await user.save();

      try {
        await sendTelegramMessage(user.telegramId, `üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è email: ${user.email}`);
      } catch (telegramError) {
        logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è ${user.email}: ${telegramError.message}`);
      }

      logger.info(`–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${user.email}`);
      res.status(200).json({ message: '–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', documents: user.documents });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${error.message}`);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
  }
);

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.post(
  '/api/apps/create',
  authenticateToken,
  upload,
  [
    body('name').notEmpty().trim().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'),
    body('description').notEmpty().trim().withMessage('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ'),
    body('category').isIn(['games', 'productivity', 'education', 'entertainment']).withMessage('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –≤—ã–±–µ—Ä–∏—Ç–µ games, productivity, education, entertainment'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${JSON.stringify(errors.array())}`);
      return res.status(400).json({ message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', errors: errors.array() });
    }

    try {
      const user = await User.findByPk(req.user.id);
      if (!user) {
        logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID: ${req.user.id}`);
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      if (!user.isVerified) {
        logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.email}`);
        return res.status(403).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π' });
      }

      const { name, description, category } = req.body;
      const files = req.files;

      if (!files || !files.icon || !files.icon[0]) {
        logger.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –∏–∫–æ–Ω–∫–∏');
        return res.status(400).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞ (JPG, JPEG –∏–ª–∏ PNG)' });
      }
      if (!files.apk || !files.apk[0]) {
        logger.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª APK');
        return res.status(400).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è APK —Ñ–∞–π–ª' });
      }

      const app = await App.create({
        name,
        description,
        category,
        iconPath: files.icon[0].path,
        apkPath: files.apk[0].path,
        userId: user.id,
        status: 'pending',
        downloads: 0,
      });

      try {
        await sendTelegramMessage(
          user.telegramId,
          `üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "${name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –£–≤–µ–¥–æ–º–∏–º, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.`
        );
      } catch (telegramError) {
        logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–∞—á–∏ –¥–ª—è ${user.email}: ${telegramError.message}`);
      }

      logger.info(`–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ ${user.email}: ${name}`);
      res.status(201).json({ message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', app });
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
  }
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  logger.error(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
  if (err instanceof multer.MulterError) {
    logger.warn(`–û—à–∏–±–∫–∞ Multer: ${err.message}`);
    return res.status(400).json({ message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${err.message}` });
  }
  if (err.message.includes('Only')) {
    logger.warn(`–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞: ${err.message}`);
    return res.status(400).json({ message: err.message });
  }
  res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});